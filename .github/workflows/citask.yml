name: CI Task

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  security_scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security scan
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Local Maven Repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: java

      - name: Build code
        run: |
          ./mvnw clean install -DskipTests

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3


  linter:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Run Checkstyle
        run: mvn checkstyle:check

  integration_test:
    needs: [security_scan, linter]
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:20.10.16
        options: --privileged
        ports:
          - 8085:8080

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: docker build -t helloworld-service .

      - name: Run Docker container
        run: docker run -d -p 8080:8080 helloworld-service

      - name: Wait for service to be available
        run: |
          until curl -s http://localhost:8080/helloworld; do
            echo "Waiting for service to be available..."
            sleep 5
          done

      - name: Test the service
        run: |
          response=$(curl -s http://localhost:8080/helloworld)
          echo "Response: $response"
          if [[ "$response" != '{"id":1,"helloworld":"Hello World"}' ]]; then
            echo "Integration test failed"
            exit 1
          fi

  build_and_push:
    needs: integration_test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          docker build -t ghcr.io/${{ github.repository }}/helloworld-service:latest .
          docker push ghcr.io/${{ github.repository }}/helloworld-service:latest