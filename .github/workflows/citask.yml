name: CI Task

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  security_scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Local Maven Repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: security-scan-maven-${{ hashFiles('pom.xml') }}

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: java

      - name: Build code
        run: |
          ./mvnw clean install -DskipTests

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: docker build -t helloworld-service .

      - name: Save Docker image as tar file
        run: docker save -o helloworld-service.tar helloworld-service

      - name: Upload Docker image tar file
        uses: actions/upload-artifact@v4
        with:
          name: helloworld-service-tar
          path: helloworld-service.tar


      - name: Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: helloworld-service:latest
          format: sarif
          output: trivy-results.sarif
          severity: 'CRITICAL,HIGH'
          timeout: '15m0s'

      - name: Upload Trivy Scan Results to GitHub Security Tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

  linter:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Run Checkstyle
        run: mvn checkstyle:check

  integration_test:
    needs: [security_scan, linter]
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:20.10.16
        options: --privileged
        ports:
          - 8085:8080

    steps:
      - name: Checkout git repository
        uses: actions/checkout@v4

      -  name: Download Docker image tar file
         uses: actions/download-artifact@v4
         with:
          name: helloworld-service-tar
          path: .

      - name: Load Docker image from tar file
        run: docker load --input helloworld-service.tar

      - name: Run Docker container
        run: docker run -d -p 8080:8080 helloworld-service

      - name: Wait for service to be available
        run:  |
          until curl -s http://localhost:8080/helloworld; do
            echo "Waiting for service to be available..."
            sleep 5
          done

      - name: Test the service
        run: ./call-test-rest.sh http://localhost:8085/helloworld
        #|
          #response=$(curl -s http://localhost:8080/helloworld)
          #echo "Response: $response"
          #if [[ "$response" != '{"id":1,"helloworld":"Hello World"}' ]]; then
            #echo "Integration test failed"
            #exit 1
          #fi

  push_docker:
    needs: integration_test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download Docker image tar file
        uses: actions/download-artifact@v4
        with:
          name: helloworld-service-tar
          path: helloworld-service.tar

      - name: Load Docker image from tar file
        run: docker load --input helloworld-service.tar

      - name: push Docker image to GitHub Container Registry
        run: |
          REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          docker tag helloworld-service:latest ghcr.io/${REPO_NAME}/helloworld-service:latest
          docker push ghcr.io/${REPO_NAME}/helloworld-service:latest